#!/usr/bin/env python

from sys import argv, exit, stdout
from os import listdir, chdir, getcwd, makedirs
from os.path import isfile, join, exists
from re import sub
from numpy import array, mean
from math import sqrt
from traceback import print_exc

files_paths = []

# take all datafile from given path (i.e. nastin_x or solidz_x, where x = 1 ... no_of_simulation)
# also, take file numbers in ascending order
def import_datafiles(no_of_coefficients, base_path, data_line):
	files = []
	files_all = []

	try:
		for i in range(no_of_coefficients):
			files_path = base_path + str(i)
			files_paths.append(files_path)

			files = [ f for f in listdir(files_path) if data_line in f ]
			files.sort()
			files_all.append(files_path)
			files_all.append(files)

	except:
		print_exc(file = stdout)
		exit(0)

	return files_all

# take all same files from all simulations; e.g. all files A.bb from all simulations
# return a list containing each file location + its name
def get_same_files(no_of_coefficients, all_files, data_line):
	all_same_files = []
	list_of_same_files = []

	try:
		for one_sim_files in all_files:

			for path in files_paths:
				if path == one_sim_files:
					file_path = one_sim_files
					#print file_path

			for sim_files in one_sim_files:
				if  data_line in sim_files:
					list_of_same_files.append(file_path)
					list_of_same_files.append(sim_files)

		all_same_files.append(list_of_same_files)
	except:
		print_exc(file = stdout)
		exit(0)

	return all_same_files

def gather_coeff(all_same_files, out_path):
	try:
		if not exists(out_path):
			makedirs(out_path)

		for files in all_same_files:
			length = len(files)

			data_one_file_type = []
			data_out = []

			for i in range(length):
				# if it is a path
				if i%2 == 0:
					path_to_file = files[i]

				#if it is a file
				else:
					data = []

					chdir(path_to_file)

					# open files and take all numerial values
					with open(files[i], 'r') as data_file:
						for line in data_file:
								data.append(line)
					
					# transform data into float
					data = [float(item) for item in data]

					back_path = ''	
					for i in range(len(path_to_file.split('/'))):
						back_path += '../'
					
					data_file.close()

					back_path = ''	
					for i in range(len(path_to_file.split('/'))):
						back_path += '../'
						
					chdir(back_path)

					# put all data in a list 
					data_one_file_type.append(data)

			out_file = 'coeff.sc.' + files[1].split('_')[1]

			# write data to file line by line
			chdir(out_path)
			with open(out_file, 'w') as var_file:
				for data_one_coeff in zip(*data_one_file_type):
					i = 0
					press = data_one_coeff[::3]
					veloc_x = data_one_coeff[1::3]
					veloc_y = data_one_coeff[2::3]

					for i in range(len(press)):
						var_file.write(str(press[i]) + ' ' + str(veloc_x[i]) + ' ' + str(veloc_y[i]) + ' \n')
			
			var_file.close()

			back_path = ''	
			for i in range(len(out_path.split('/'))):
				back_path += '../'

			chdir(back_path)

	except:
		print_exc(file = stdout)
		exit(0)

if __name__=="__main__":

	if len(argv) != 5:
		print "Error in " + argv[0] + "!"
		print "Usage: " + argv[0] + " data_path all_coeff_path data_file no_of_coefficients"
		exit(0)

	path =  argv[1]
	out_path = argv[2]
	data_line = argv[3]
	no_of_coefficients = int(argv[4])

	# call all functions so that in the end to compute the mean
	all_filess = import_datafiles(no_of_coefficients, path, data_line)

	all_same_files =  get_same_files(no_of_coefficients, all_filess, data_line)
	gather_coeff(all_same_files, out_path)

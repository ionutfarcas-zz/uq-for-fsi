#!/usr/bin/env python

# script used for getting the quantities of interest (qoi) out of the collective 
# datafile and plot them; for the current setting, the qoi are the displacement
# on the x axis and force 0 and force 1

from os import rename, remove
from sys import argv, exit, stdout
from traceback import print_exc
from matplotlib.pyplot import *
from pylab import plot, show
from math import sqrt
import numpy as np

def correction():
	correc = {0:1, 1:1, 2:1, 3:2, 4:1, 5:2, 6:6, 7:2, 8:2, 9:6, 10:24, 11:6, 12:4, 13:6, 14:24}

	return correc

def read_det_file(datafile):
	det_displacement_x = []
	det_forces0 = []
	det_forces1 = []

	try:
		with open(datafile, 'r') as input_file:
			for line in input_file:
				if line.startswith("DATA") or line.startswith("Displacements0"):
					continue
				else:
					line_tokens = line.split()

					det_displacement_x.append(line_tokens[0])
					det_forces0.append(line_tokens[1])
					det_forces1.append(line_tokens[2])
		input_file.close()
		
	except IOError:
		print_exc(file = stdout)
		exit(0)

	return det_displacement_x, det_forces0, det_forces1

def parse_sc_file(datafile, no_of_coeff):
	correc = correction()

	mean_disp_x_all = []
	var_disp_x_all = []
	mean_f0_all = []
	var_f0_all = []
	mean_f1_all = []
	var_f1_all = []

	displacement_x = []
	forces0 = []
	forces1 = []

	timestep_disp_x = []
	timestep_forces0 = []
	timestep_forces1 = []

	m_disp_x = 0.
	var_disp_x = 0.
	m_f0_x = 0.
	var_f0_x = 0.
	m_f1_x = 0.
	var_f1_x = 0.

	try:
		with open(datafile, 'r') as input_file:
			for line in input_file:

					line_tokens = line.split()

					displacement_x.append(line_tokens[0])
					forces0.append(line_tokens[1])
					forces1.append(line_tokens[2])

			displacement_x = np.array(displacement_x)
			displacement_x = displacement_x.astype(np.float)
			forces0 = np.array(forces0)
			forces0 = forces0.astype(np.float)
			forces1 = np.array(forces1)
			forces1 = forces1.astype(np.float)

			no_of_timesteps = len(displacement_x)/no_of_coeff

			for i in range(no_of_timesteps):
				for j in range(no_of_coeff):

					timestep_disp_x.append(displacement_x[i*no_of_coeff + j]*sqrt(correc[j]))
					timestep_forces0.append(forces0[i*no_of_coeff + j]*sqrt(correc[j]))
					timestep_forces1.append(forces1[i*no_of_coeff + j]*sqrt(correc[j]))

				timestep_disp_x = np.array(timestep_disp_x)
				timestep_disp_x = timestep_disp_x.astype(np.float)
				timestep_forces0 = np.array(timestep_forces0)
				timestep_forces0 = timestep_forces0.astype(np.float)
				timestep_forces1 = np.array(timestep_forces1)
				timestep_forces1 = timestep_forces1.astype(np.float)

				m_disp_x = timestep_disp_x[0]
				var_disp_x = np.sum(coeff**2 for coeff in timestep_disp_x) - m_disp_x**2
				m_f0 = timestep_forces0[0]
				var_f0 = np.sum(coeff**2 for coeff in timestep_forces0) - m_f0**2
				m_f1 = timestep_forces1[0]
				var_f1 = np.sum(coeff**2 for coeff in timestep_forces1) - m_f1**2

				mean_disp_x_all.append(m_disp_x)
				var_disp_x_all.append(var_disp_x)
				mean_f0_all.append(m_f0)
				var_f0_all.append(var_f0)
				mean_f1_all.append(m_f1)
				var_f1_all.append(var_f1)

				timestep_disp_x = []
				timestep_forces0 = []
				timestep_forces1 = []

		input_file.close()
		
	except IOError:
		print_exc(file = stdout)
		exit(0)

	return mean_disp_x_all, var_disp_x_all, mean_f0_all, var_f0_all, mean_f1_all, var_f1_all

def diff_plot_1D():
	fig_mean, ax_mean = subplots(3)
	fig_var, ax_var = subplots(3)

	x_axis = np.linspace(0, no_of_timesteps, no_of_timesteps)

	fig_mean.suptitle("mean for one dimensional simulations", fontsize=30)
	fig_var.suptitle("variance for one dimensional simulations", fontsize=30)

	ax_mean[0].plot(x_axis, det_displacement_x, 'b', label='det', linewidth=4.0)
	ax_mean[0].plot(x_axis, mean_disp_x_all_1, 'r--', label=r'$\nu_f$', linewidth=4.0)
	ax_mean[0].plot(x_axis, mean_disp_x_all_2, 'g-.', label=r'$\rho_f$', linewidth=4.0)
	ax_mean[0].plot(x_axis, mean_disp_x_all_3, 'c--', label=r'$\rho_s$', linewidth=4.0)
	ax_mean[0].plot(x_axis, mean_disp_x_all_4, 'k-.', label=r'$E$', linewidth=4.0)
	ax_mean[0].plot(x_axis, mean_disp_x_all_5, 'y--', label=r'$\nu_s$', linewidth=4.0)
	ax_mean[0].set_ylabel('Mean of the x displacement', fontsize=20)
	ax_mean[0].autoscale(enable=True, axis=u'both', tight=True)
	ax_mean[0].legend(loc="best", fancybox=True, fontsize=25)
	ax_mean[0].grid()
	ax_mean[0].set_xlabel('no. of time steps', fontsize=20)

	ax_mean[1].plot(x_axis, det_forces0, 'b', label='det', linewidth=4.0)
	ax_mean[1].plot(x_axis, mean_f0_all_1, 'r--', label=r'$\nu_f$', linewidth=4.0)
	ax_mean[1].plot(x_axis, mean_f0_all_2, 'g-.', label=r'$\rho_f$', linewidth=4.0)
	ax_mean[1].plot(x_axis, mean_f0_all_3, 'c--', label=r'$\rho_s$', linewidth=4.0)
	ax_mean[1].plot(x_axis, mean_f0_all_4, 'k-.', label=r'$E$', linewidth=4.0)
	ax_mean[1].plot(x_axis, mean_f0_all_5, 'y--', label=r'$\nu_s$', linewidth=4.0)
	ax_mean[1].set_ylabel('Mean of the x force', fontsize=20)
	ax_mean[1].autoscale(enable=True, axis=u'both', tight=True)
	ax_mean[1].legend(loc="best", fancybox=True, fontsize=25)
	ax_mean[1].grid()
	ax_mean[1].set_xlabel('no. of time steps', fontsize=20)

	ax_mean[2].plot(x_axis, det_forces1, 'b', label='det', linewidth=4.0)
	ax_mean[2].plot(x_axis, mean_f1_all_1, 'r--', label=r'$\nu_f$', linewidth=4.0)
	ax_mean[2].plot(x_axis, mean_f1_all_2, 'g-.', label=r'$\rho_f$', linewidth=4.0)
	ax_mean[2].plot(x_axis, mean_f1_all_3, 'c--', label=r'$\rho_s$', linewidth=4.0)
	ax_mean[2].plot(x_axis, mean_f1_all_4, 'k-.', label=r'$E$', linewidth=4.0)
	ax_mean[2].plot(x_axis, mean_f1_all_5, 'y--', label=r'$\nu_s$', linewidth=4.0)
	ax_mean[2].set_ylabel('Mean of the y force', fontsize=20)
	ax_mean[2].autoscale(enable=True, axis=u'both', tight=True)
	ax_mean[2].legend(loc="best", fancybox=True, fontsize=25)
	ax_mean[2].grid()
	ax_mean[2].set_xlabel('no. of time steps', fontsize=20)

	ax_var[0].plot(x_axis, var_disp_x_all_1, 'r--', label=r'$\nu_f$', linewidth=4.0)
	ax_var[0].plot(x_axis, var_disp_x_all_2, 'g-.', label=r'$\rho_f$', linewidth=4.0)
	ax_var[0].plot(x_axis, var_disp_x_all_3, 'c--', label=r'$\rho_s$', linewidth=4.0)
	ax_var[0].plot(x_axis, var_disp_x_all_4, 'k-.', label=r'$E$', linewidth=4.0)
	ax_var[0].plot(x_axis, var_disp_x_all_5, 'y--', label=r'$\rho_s$', linewidth=4.0)
	ax_var[0].set_ylabel('Variance of the x displacement', fontsize=20)
	ax_var[0].autoscale(enable=True, axis=u'both', tight=True)
	ax_var[0].legend(loc="best", fancybox=True, fontsize=25)
	ax_var[0].grid()
	ax_var[0].set_xlabel('no. of time steps', fontsize=20)

	ax_var[1].plot(x_axis, var_f0_all_1, 'r--', label=r'$\nu_f$', linewidth=4.0)
	ax_var[1].plot(x_axis, var_f0_all_2, 'g-.', label=r'$\rho_f$', linewidth=4.0)
	ax_var[1].plot(x_axis, var_f0_all_3, 'c--', label=r'$\rho_s$', linewidth=4.0)
	ax_var[1].plot(x_axis, var_f0_all_4, 'k-.', label=r'$E$', linewidth=4.0)
	ax_var[1].plot(x_axis, var_f0_all_5, 'y--', label=r'$\nu_s$', linewidth=4.0)
	ax_var[1].set_ylabel('Variance of the x force', fontsize=20)
	ax_var[1].autoscale(enable=True, axis=u'both', tight=True)
	ax_var[1].legend(loc="best", fancybox=True, fontsize=25)
	ax_var[1].grid()
	ax_var[1].set_xlabel('no. of time steps', fontsize=20)

	ax_var[2].plot(x_axis, var_f1_all_1, 'r--', label=r'$\nu_f$', linewidth=4.0)
	ax_var[2].plot(x_axis, var_f1_all_2, 'g-.', label=r'$\rho_f$', linewidth=4.0)
	ax_var[2].plot(x_axis, var_f1_all_3, 'c--', label=r'$\rho_s$', linewidth=4.0)
	ax_var[2].plot(x_axis, var_f1_all_4, 'k-.', label=r'$E$', linewidth=4.0)
	ax_var[2].plot(x_axis, var_f1_all_5, 'y--', label=r'$\nu_s$', linewidth=4.0)
	ax_var[2].set_ylabel('Variance of the y force', fontsize=20)
	ax_var[2].autoscale(enable=True, axis=u'both', tight=True)
	ax_var[2].legend(loc="best", fancybox=True, fontsize=25)
	ax_var[2].grid()
	ax_var[2].set_xlabel('no. of time steps', fontsize=20)

	show()

	fig_mean.savefig("images/mean_onedim.png")
	fig_var.savefig("images/var_onedim.png")

def diff_plot_2D():
	fig_mean, ax_mean = subplots(3)
	fig_var, ax_var = subplots(3)

	x_axis = np.linspace(0, no_of_timesteps, no_of_timesteps)

	fig_mean.suptitle("mean SC 2D brute force")
	fig_var.suptitle("var SC 2D brute force")

	ax_mean[0].plot(x_axis, mean_disp_x_all_1, 'r--', label=datafile1.split('.')[1], linewidth=4.0)
	ax_mean[0].plot(x_axis, mean_disp_x_all_2, 'g-.', label=datafile2.split('.')[1], linewidth=4.0)
	ax_mean[0].plot(x_axis, mean_disp_x_all_3, 'c--', label=datafile3.split('.')[1], linewidth=4.0)
	ax_mean[0].plot(x_axis, mean_disp_x_all_4, 'k-.', label=datafile4.split('.')[1], linewidth=4.0)
	ax_mean[0].plot(x_axis, mean_disp_x_all_5, 'y--', label=datafile5.split('.')[1], linewidth=4.0)
	ax_mean[0].plot(x_axis, mean_disp_x_all_6, 'r-.', label=datafile6.split('.')[1], linewidth=4.0)
	ax_mean[0].plot(x_axis, mean_disp_x_all_7, 'g--', label=datafile7.split('.')[1], linewidth=4.0)
	ax_mean[0].plot(x_axis, mean_disp_x_all_8, 'c-.', label=datafile8.split('.')[1], linewidth=4.0)
	ax_mean[0].plot(x_axis, mean_disp_x_all_9, 'k--', label=datafile9.split('.')[1], linewidth=4.0)
	ax_mean[0].plot(x_axis, mean_disp_x_all_10, 'y-.', label=datafile10.split('.')[1], linewidth=4.0)
	ax_mean[0].set_ylabel('Mean of the x displacement')
	ax_mean[0].autoscale(enable=True, axis=u'both', tight=True)
	ax_mean[0].legend(loc="best", fancybox=True)
	ax_mean[0].grid()
	ax_mean[0].set_xlabel('no. of time steps')

	ax_mean[1].plot(x_axis, mean_f0_all_1, 'r--', label=datafile1.split('.')[1], linewidth=4.0)
	ax_mean[1].plot(x_axis, mean_f0_all_2, 'g-.', label=datafile2.split('.')[1], linewidth=4.0)
	ax_mean[1].plot(x_axis, mean_f0_all_3, 'c--', label=datafile3.split('.')[1], linewidth=4.0)
	ax_mean[1].plot(x_axis, mean_f0_all_4, 'k-.', label=datafile4.split('.')[1], linewidth=4.0)
	ax_mean[1].plot(x_axis, mean_f0_all_5, 'y--', label=datafile5.split('.')[1], linewidth=4.0)
	ax_mean[1].plot(x_axis, mean_f0_all_6, 'r-.', label=datafile6.split('.')[1], linewidth=4.0)
	ax_mean[1].plot(x_axis, mean_f0_all_7, 'g--', label=datafile7.split('.')[1], linewidth=4.0)
	ax_mean[1].plot(x_axis, mean_f0_all_8, 'c-.', label=datafile8.split('.')[1], linewidth=4.0)
	ax_mean[1].plot(x_axis, mean_f0_all_9, 'k--', label=datafile9.split('.')[1], linewidth=4.0)
	ax_mean[1].plot(x_axis, mean_f0_all_10, 'y-.', label=datafile10.split('.')[1], linewidth=4.0)
	ax_mean[1].set_ylabel('Mean of the x force')
	ax_mean[1].autoscale(enable=True, axis=u'both', tight=True)
	#ax_mean[1].legend(loc="best", fancybox=True)
	ax_mean[1].grid()
	ax_mean[1].set_xlabel('no. of time steps')

	ax_mean[2].plot(x_axis, mean_f1_all_1, 'r--', label=datafile1.split('.')[1], linewidth=4.0)
	ax_mean[2].plot(x_axis, mean_f1_all_2, 'g-.', label=datafile2.split('.')[1], linewidth=4.0)
	ax_mean[2].plot(x_axis, mean_f1_all_3, 'c--', label=datafile3.split('.')[1], linewidth=4.0)
	ax_mean[2].plot(x_axis, mean_f1_all_4, 'k-.', label=datafile4.split('.')[1], linewidth=4.0)
	ax_mean[2].plot(x_axis, mean_f1_all_5, 'y--', label=datafile5.split('.')[1], linewidth=4.0)
	ax_mean[2].plot(x_axis, mean_f1_all_6, 'r-.', label=datafile6.split('.')[1], linewidth=4.0)
	ax_mean[2].plot(x_axis, mean_f1_all_7, 'g--', label=datafile7.split('.')[1], linewidth=4.0)
	ax_mean[2].plot(x_axis, mean_f1_all_8, 'c-.', label=datafile8.split('.')[1], linewidth=4.0)
	ax_mean[2].plot(x_axis, mean_f1_all_9, 'k--', label=datafile9.split('.')[1], linewidth=4.0)
	ax_mean[2].plot(x_axis, mean_f1_all_10, 'y-.', label=datafile10.split('.')[1], linewidth=4.0)
	ax_mean[2].set_ylabel('Mean of the y force')
	ax_mean[2].autoscale(enable=True, axis=u'both', tight=True)
	#ax_mean[2].legend(loc="best", fancybox=True)
	ax_mean[2].grid()
	ax_mean[2].set_xlabel('no. of time steps')

	ax_var[0].plot(x_axis, var_disp_x_all_1, 'r--', label=datafile1.split('.')[1], linewidth=4.0)
	ax_var[0].plot(x_axis, var_disp_x_all_2, 'g-.', label=datafile2.split('.')[1], linewidth=4.0)
	ax_var[0].plot(x_axis, var_disp_x_all_3, 'c--', label=datafile3.split('.')[1], linewidth=4.0)
	ax_var[0].plot(x_axis, var_disp_x_all_4, 'k-.', label=datafile4.split('.')[1], linewidth=4.0)
	ax_var[0].plot(x_axis, var_disp_x_all_5, 'y--', label=datafile5.split('.')[1], linewidth=4.0)
	ax_var[0].plot(x_axis, var_disp_x_all_6, 'r-.', label=datafile6.split('.')[1], linewidth=4.0)
	ax_var[0].plot(x_axis, var_disp_x_all_7, 'g--', label=datafile7.split('.')[1], linewidth=4.0)
	ax_var[0].plot(x_axis, var_disp_x_all_8, 'c-.', label=datafile8.split('.')[1], linewidth=4.0)
	ax_var[0].plot(x_axis, var_disp_x_all_9, 'k--', label=datafile9.split('.')[1], linewidth=4.0)
	ax_var[0].plot(x_axis, var_disp_x_all_10, 'y-.', label=datafile10.split('.')[1], linewidth=4.0)
	ax_var[0].set_ylabel('Var of the x displacement')
	ax_var[0].autoscale(enable=True, axis=u'both', tight=True)
	ax_var[0].legend(loc="best", fancybox=True)
	ax_var[0].grid()
	ax_var[0].set_xlabel('no. of time steps')

	ax_var[1].plot(x_axis, var_f0_all_1, 'r--', label=datafile1.split('.')[1], linewidth=4.0)
	ax_var[1].plot(x_axis, var_f0_all_2, 'g-.', label=datafile2.split('.')[1], linewidth=4.0)
	ax_var[1].plot(x_axis, var_f0_all_3, 'c--', label=datafile3.split('.')[1], linewidth=4.0)
	ax_var[1].plot(x_axis, var_f0_all_4, 'k-.', label=datafile4.split('.')[1], linewidth=4.0)
	ax_var[1].plot(x_axis, var_f0_all_5, 'y--', label=datafile5.split('.')[1], linewidth=4.0)
	ax_var[1].plot(x_axis, var_f0_all_6, 'r-.', label=datafile6.split('.')[1], linewidth=4.0)
	ax_var[1].plot(x_axis, var_f0_all_7, 'g--', label=datafile7.split('.')[1], linewidth=4.0)
	ax_var[1].plot(x_axis, var_f0_all_8, 'c-.', label=datafile8.split('.')[1], linewidth=4.0)
	ax_var[1].plot(x_axis, var_f0_all_9, 'k--', label=datafile9.split('.')[1], linewidth=4.0)
	ax_var[1].plot(x_axis, var_f0_all_10, 'y-.', label=datafile10.split('.')[1], linewidth=4.0)
	ax_var[1].set_ylabel('Var of the x force')
	ax_var[1].autoscale(enable=True, axis=u'both', tight=True)
	#ax_var[1].legend(loc="best", fancybox=True)
	ax_var[1].grid()
	ax_var[1].set_xlabel('no. of time steps')

	ax_var[2].plot(x_axis, var_f1_all_1, 'r--', label=datafile1.split('.')[1], linewidth=4.0)
	ax_var[2].plot(x_axis, var_f1_all_2, 'g-.', label=datafile2.split('.')[1], linewidth=4.0)
	ax_var[2].plot(x_axis, var_f1_all_3, 'c--', label=datafile3.split('.')[1], linewidth=4.0)
	ax_var[2].plot(x_axis, var_f1_all_4, 'k-.', label=datafile4.split('.')[1], linewidth=4.0)
	ax_var[2].plot(x_axis, var_f1_all_5, 'y--', label=datafile5.split('.')[1], linewidth=4.0)
	ax_var[2].plot(x_axis, var_f1_all_6, 'r-.', label=datafile6.split('.')[1], linewidth=4.0)
	ax_var[2].plot(x_axis, var_f1_all_7, 'g--', label=datafile7.split('.')[1], linewidth=4.0)
	ax_var[2].plot(x_axis, var_f1_all_8, 'c-.', label=datafile8.split('.')[1], linewidth=4.0)
	ax_var[2].plot(x_axis, var_f1_all_9, 'k--', label=datafile9.split('.')[1], linewidth=4.0)
	ax_var[2].plot(x_axis, var_f1_all_10, 'y-.', label=datafile10.split('.')[1], linewidth=4.0)
	ax_var[2].set_ylabel('Var of the y force')
	ax_var[2].autoscale(enable=True, axis=u'both', tight=True)
	#ax_var[2].legend(loc="best", fancybox=True)
	ax_var[2].grid()
	ax_var[2].set_xlabel('no. of time steps')

	show()

	fig_mean.savefig("images/" + "mean_2D_all_brute_force.png")
	fig_var.savefig("images/" + "var_2D_all_brute_force.png")
	
if __name__ == "__main__":

	if len(argv) != 12:
		print "Error in " + argv[0] + "!"
		print "Usage: " + argv[0] + " datafile_x no_of_coeff_x, x = 1..." + str(5) + " det datafile"
		exit(0)

	datafile1 = argv[1]
	datafile2 = argv[3]
	datafile3 = argv[5]
	datafile4 = argv[7]
	datafile5 = argv[9]
	# datafile6 = argv[11]
	# datafile7 = argv[13]
	# datafile8 = argv[15]
	# datafile9 = argv[17]
	# datafile10 = argv[19]

	det_datafile = argv[11]

	no_of_coeff_1 = int(argv[2])
	no_of_coeff_2 = int(argv[4])
	no_of_coeff_3 = int(argv[6])
	no_of_coeff_4 = int(argv[8])
	no_of_coeff_5 = int(argv[10])
	# no_of_coeff_6 = int(argv[12])
	# no_of_coeff_7 = int(argv[14])
	# no_of_coeff_8 = int(argv[16])
	# no_of_coeff_9 = int(argv[18])
	# no_of_coeff_10 = int(argv[20])

	mean_disp_x_all_1, var_disp_x_all_1, mean_f0_all_1, var_f0_all_1, mean_f1_all_1, var_f1_all_1 = parse_sc_file(datafile1, no_of_coeff_1)
	mean_disp_x_all_2, var_disp_x_all_2, mean_f0_all_2, var_f0_all_2, mean_f1_all_2, var_f1_all_2 = parse_sc_file(datafile2, no_of_coeff_2)
	mean_disp_x_all_3, var_disp_x_all_3, mean_f0_all_3, var_f0_all_3, mean_f1_all_3, var_f1_all_3 = parse_sc_file(datafile3, no_of_coeff_3)
	mean_disp_x_all_4, var_disp_x_all_4, mean_f0_all_4, var_f0_all_4, mean_f1_all_4, var_f1_all_4 = parse_sc_file(datafile4, no_of_coeff_4)
	mean_disp_x_all_5, var_disp_x_all_5, mean_f0_all_5, var_f0_all_5, mean_f1_all_5, var_f1_all_5 = parse_sc_file(datafile5, no_of_coeff_5)
	# mean_disp_x_all_6, var_disp_x_all_6, mean_f0_all_6, var_f0_all_6, mean_f1_all_6, var_f1_all_6 = parse_sc_file(datafile6, no_of_coeff_6)
	# mean_disp_x_all_7, var_disp_x_all_7, mean_f0_all_7, var_f0_all_7, mean_f1_all_7, var_f1_all_7 = parse_sc_file(datafile7, no_of_coeff_7)
	# mean_disp_x_all_8, var_disp_x_all_8, mean_f0_all_8, var_f0_all_8, mean_f1_all_8, var_f1_all_8 = parse_sc_file(datafile8, no_of_coeff_8)
	# mean_disp_x_all_9, var_disp_x_all_9, mean_f0_all_9, var_f0_all_9, mean_f1_all_9, var_f1_all_9 = parse_sc_file(datafile9, no_of_coeff_9)
	# mean_disp_x_all_10, var_disp_x_all_10, mean_f0_all_10, var_f0_all_10, mean_f1_all_10, var_f1_all_10 = parse_sc_file(datafile10, no_of_coeff_10)

	no_of_timesteps = len(mean_disp_x_all_1)

	det_displacement_x, det_forces0, det_forces1 = read_det_file(det_datafile)

	diff_plot_1D()
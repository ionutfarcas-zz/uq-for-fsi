#!/usr/bin/env python

from traceback import print_exc
from sys import argv, exit, stdout
from numpy import array, linspace, mean, histogram, ones, zeros
from matplotlib.pyplot import *
from matplotlib.path import *
from matplotlib.animation import *
from matplotlib.patches import *
from pylab import plot, show, hist
from scipy.stats import norm, lognorm, chi2, t
from statsmodels.api import qqplot, nonparametric

displacement_x_all = []
forces0_all = []
forces1_all = []

fig_hist, ax_hist = subplots(3)
fig_kde, ax_kde = subplots(3)

# used to get data values of interest from the main program output files
def get_qois(data_file):
	disp_x = 0.
	force0 = 0.
	force1 = 0.

	displacement_x = []
	forces0 = []
	forces1 = []

	timestep_disp_x = []
	timestep_forces0 = []
	timestep_forces1 = []

	try:
		with open(data_file, 'r') as input_file:

			for line in input_file:
				if line.startswith("DATA") or line.startswith("Displacements0"):
					continue
				else:
					line_tokens = line.split()

					disp_x = line_tokens[0]
					force0 = line_tokens[1]
					force1 = line_tokens[2]

					displacement_x.append(disp_x)
					forces0.append(force0)
					forces1.append(force1)

		displacement_x = array(displacement_x, dtype='float')
		forces0 = array(forces0, dtype='float')
		forces1 = array(forces1, dtype='float')

		input_file.close()

		no_of_timesteps = len(displacement_x)/no_of_simulations

		for i in range(no_of_timesteps):
			for j in range(no_of_simulations):

				timestep_disp_x.append(displacement_x[i + no_of_timesteps*j])
				timestep_forces0.append(forces0[i + no_of_timesteps*j])
				timestep_forces1.append(forces1[i + no_of_timesteps*j])

			displacement_x_all.append(timestep_disp_x)
			forces0_all.append(timestep_forces0)
			forces1_all.append(timestep_forces1)

			timestep_disp_x = []
			timestep_forces0 = []
			timestep_forces1 = []


	except IOError:
		print_exc(file = stdout)
		exit(0)

def init_hist(data, i):
	n, bins = histogram(data)

	left = array(bins[:-1])
	right = array(bins[1:])
	bottom = zeros(len(left))
	top = bottom + n
	nrects = len(left)

	nverts = nrects*(1+3+1)
	verts = zeros((nverts, 2))
	codes = ones(nverts, int) * Path.LINETO
	codes[0::5] = Path.MOVETO
	codes[4::5] = Path.CLOSEPOLY
	verts[0::5,0] = left
	verts[0::5,1] = bottom
	verts[1::5,0] = left
	verts[1::5,1] = top
	verts[2::5,0] = right
	verts[2::5,1] = top
	verts[3::5,0] = right
	verts[3::5,1] = bottom

	barpath = Path(verts, codes)
	patch = PathPatch(barpath, facecolor='green', edgecolor='yellow', alpha=0.5)
	ax_hist[i].add_patch(patch)

	ax_hist[i].set_xlim(left[0], right[-1])
	ax_hist[i].set_ylim(bottom.min(), top.max())

	ax_hist[i].grid()

	return top, bottom, verts

def init_kde():
	line1, = ax_kde[0].plot([], [], 'r', label="pdf x displacement")
	line2, = ax_kde[1].plot([], [], 'r', label="pdf force x")
	line3, = ax_kde[2].plot([], [], 'r', label="pdf force y")

	ax_kde[0].set_title('pdf approximation of x displacement using KDE')
	ax_kde[0].autoscale(enable=True, axis=u'both', tight=True)
	ax_kde[0].legend(loc="best", fancybox=True)
	ax_kde[0].grid()

	ax_kde[1].set_title('pdf approximation of force x using KDE')
	ax_kde[1].autoscale(enable=True, axis=u'both', tight=True)
	ax_kde[1].legend(loc="best", fancybox=True)
	ax_kde[1].grid()

	ax_kde[2].set_title('pdf approximation of force y using KDE')
	ax_kde[2].autoscale(enable=True, axis=u'both', tight=True)
	ax_kde[2].legend(loc="best", fancybox=True)
	ax_kde[2].grid()

	return line1, line2, line3

def animate_hist(i):
    timestep_disp_x = array(displacement_x_all[i], dtype='float')
    n, bins = histogram(timestep_disp_x)
    top_disp_x = bottom_disp_x + n
    verts_disp_x[1::5,1] = top_disp_x
    verts_disp_x[2::5,1] = top_disp_x

    timestep_forces0 = array(forces0_all[i], dtype='float')
    n, bins = histogram(timestep_forces0)
    top_forces0 = bottom_forces0 + n
    verts_forces0[1::5,1] = top_forces0
    verts_forces0[2::5,1] = top_forces0

    timestep_forces1 = array(forces1_all[i], dtype='float')
    n, bins = histogram(timestep_forces1)
    top_forces1 = bottom_forces1 + n
    verts_forces1[1::5,1] = top_forces1
    verts_forces1[2::5,1] = top_forces1


def animate_kde(i):
	disp_x_pdf = nonparametric.KDEUnivariate(displacement_x_all[i])
	disp_x_pdf.fit(kernel="gau")
	forces0_pdf = nonparametric.KDEUnivariate(forces0_all[i])
	forces0_pdf.fit(kernel="gau")
	forces1_pdf = nonparametric.KDEUnivariate(forces1_all[i])
	forces1_pdf.fit(kernel="gau")

	ax_kde[0].clear()
	ax_kde[1].clear()
	ax_kde[2].clear()
	line1, = ax_kde[0].plot(disp_x_pdf.support, disp_x_pdf.density)
	line2, = ax_kde[1].plot(forces0_pdf.support, forces0_pdf.density)
	line3, = ax_kde[2].plot(forces1_pdf.support, forces1_pdf.density)

	return line1, line2, line3

if __name__ == "__main__":

	if len(argv) != 3:
		print "Error in " + argv[0] + "!"
		print "Usage: " + argv[0] + " datafile no_of_simulations"
		exit(0)

	datafile = argv[1]
	no_of_simulations = int(argv[2])

	get_qois(datafile)
	no_of_timesteps = len(displacement_x_all)

	timestep_disp_x = array(displacement_x_all[0], dtype='float')
	timestep_forces0 = array(forces0_all[0], dtype='float')
	timestep_forces1 = array(forces1_all[0], dtype='float')

	top_disp_x, bottom_disp_x, verts_disp_x = init_hist(timestep_disp_x, 0)
	top_forces0, bottom_forces0, verts_forces0 = init_hist(timestep_forces0, 1)
	top_forces1, bottom_forces1, verts_forces1 = init_hist(timestep_forces1, 2)

	ani_hist = FuncAnimation(fig_hist, animate_hist, init_func = None, frames=no_of_timesteps, interval = 500, repeat=False)
	ani_hist_name = 'MCS_hist_' + str(no_of_timesteps) + '_' + str(no_of_simulations) + '.gif'

	ani_kde = FuncAnimation(fig_kde, animate_kde, init_func = init_kde, frames=no_of_timesteps, interval = 500, blit = True, repeat = False)
	ani_kde_name = 'MCS_pdf_est_' + str(no_of_timesteps) + '_' + str(no_of_simulations) + '.gif'
	
	show()

	ani_hist.save(ani_hist_name, writer='imagemagick')
	ani_kde.save(ani_kde_name, writer='imagemagick')
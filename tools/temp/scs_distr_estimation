#!/usr/bin/env python

from traceback import print_exc
from sys import argv, exit, stdout
from numpy import random, array, linspace
from matplotlib.pyplot import *
from pylab import plot, show, hist
from scipy.stats.kde import gaussian_kde

def hermite_poly(deg, var):
	try:
		poly_val = 0.0

		if deg == 0:
			poly_val = 1.0
		elif deg == 1:
			poly_val = var
		else:
			poly_val = var*hermite_poly(deg - 1, var) - (deg - 1)*hermite_poly(deg - 2, var) 

		return poly_val
	except:
		print_exc(file = stdout)
		exit(0)

def _1d_gpc_approx(coeffs, var, size):
	gpc_approx = []

	try:
		trunc_size = len(coeffs)

		for i in range(size):
			approx = 0.0

			for j in range(trunc_size):
				approx += coeffs[j]*hermite_poly(j, var[i])

			gpc_approx.append(approx)

		gpc_approx = array(gpc_approx, dtype='float')
		return gpc_approx

	except:
		print_exc(file = stdout)
		exit(0)

def get_coeffs(coeffs_file):
	displacement_x = []
	forces0 = []
	forces1 = []

	try:
		with open(coeffs_file, 'r') as input_file:

			for line in input_file:
				read_line = line.split()

				displacement_x.append(read_line[0])
				forces0.append(read_line[1])
				forces1.append(read_line[2])

		displacement_x = array(displacement_x, dtype='float')
		forces0 = array(forces0, dtype='float')
		forces1 = array(forces1, dtype='float')

		input_file.close()

		return displacement_x, forces0, forces1

	except IOError:
		print_exc(file = stdout)
		exit(0)

if __name__ == "__main__":

	if len(argv) != 5:
		print "Error in " + argv[0] + "!"
		print "Usage: " + argv[0] + " coeffs_file mean stddev no_rand_vars"
		exit(0)
	
	coeffs_file = argv[1]
	m = float(argv[2])
	s = float(argv[3])
	no_rand_vars = int(argv[4]);

	coeff_disp_x, coeff_f0, coeff_f1 = get_coeffs(coeffs_file)
	rand_vars = random.normal(m, s, no_rand_vars)
	
	approx_disp_x = _1d_gpc_approx(coeff_disp_x, rand_vars, no_rand_vars)
	approx_forces0 = _1d_gpc_approx(coeff_f0, rand_vars, no_rand_vars)
	approx_forces1 = _1d_gpc_approx(coeff_f1, rand_vars, no_rand_vars)

	disp_x_pdf = gaussian_kde(approx_disp_x)
	forces0_pdf = gaussian_kde(approx_forces0)
	forces1_pdf = gaussian_kde(approx_forces1)

	x_disp_x = linspace(min(approx_disp_x), max(approx_disp_x), no_rand_vars)
	x_forces0 = linspace(min(approx_forces0), max(approx_forces0), no_rand_vars)
	x_forces1 = linspace(min(approx_forces1), max(approx_forces1), no_rand_vars)

	f, axarr = subplots(3)

	axarr[0].hist(approx_disp_x, normed=1, alpha=.3, label="histogram") # histogram
	axarr[0].plot(x_disp_x, disp_x_pdf(x_disp_x), 'r', label="approximated pdf") # distribution function
	axarr[0].set_title('pdf approximation of x displacement using KDE')
	axarr[0].autoscale(enable=True, axis=u'both', tight=True)
	axarr[0].legend(loc="upper right", fancybox=True)
	axarr[0].grid()

	axarr[1].hist(approx_forces0, normed=0, alpha=.3, label="histogram") # histogram
	axarr[1].plot(x_forces0, forces0_pdf(x_forces0), 'r', label="approximated pdf") # distribution function
	axarr[1].set_title('pdf approximation of force 0 using KDE')
	axarr[1].autoscale(enable=True, axis=u'both', tight=True)
	axarr[1].legend(loc="upper right", fancybox=True)
	axarr[1].grid()

	axarr[2].hist(approx_forces1, normed=1, alpha=.3, label="histogram") # histogram
	axarr[2].plot(x_forces1, forces1_pdf(x_forces1), 'r', label="approximated pdf") # distribution function
	axarr[2].set_title('pdf approximation of forces1 using KDE')
	axarr[2].autoscale(enable=True, axis=u'both', tight=True)
	axarr[2].legend(loc="upper right", fancybox=True)
	axarr[2].grid()	

	show()

	f.savefig('SC_pdf_estimation.png')

